@startuml

title Abstract Factoryクラス図

note as memo
    図形を生成するプログラム。
    プレーンテキストでも、SVGでも出力できる。
endnote

note as 

class DiagramFactory {
    "図形生成インスタンスのファクトリの基底クラス"
    --
    ダイアグラムを生成する(横幅: Integer, 縦幅: Integer)
    四角形を生成する(横幅: Integer, 縦幅: Integer)
    テキストを生成する(x座標: Integer, y座標: Integer, テキスト文: String, フォントサイズ: Integer)
}

class DiagramFactory.Diagram {
    "Diagram(図形)"
    --
    追加する(コンポーネント: Component)
}

class DiagramFactory.Component {
    "Component(図形の構成要素)"
    --

}

class DiagramFactory.Rectangle {
    "Rectangle(四角形)"
    --
}

class DiagramFactory.Text {
    "Text(テキスト)"
    --
}

DiagramFactory --> DiagramFactory.Diagram
DiagramFactory --> DiagramFactory.Rectangle
DiagramFactory --> DiagramFactory.Text
DiagramFactory.Diagram *-- DiagramFactory.Component

DiagramFactory.Text --|> DiagramFactory.Component
DiagramFactory.Rectangle --|> DiagramFactory.Component

class SVGDiagramFactory {
    "SVGDiagramFactory (ダイアグラムファクトリ)"
}

class SVGDiagramFactory.Diagram {
    "Diagram(図形)"
    --
    追加する(コンポーネント: component)
}

class SVGDiagramFactory.Component {
    "Component(図形の構成要素)"
    --
}

class SVGDiagramFactory.Rectangle {
    "Rectangle(四角形)"
    --
}

class SVGDiagramFactory.Text {
    "Text(テキスト)"
    --
}

SVGDiagramFactory --> SVGDiagramFactory.Diagram
SVGDiagramFactory --> SVGDiagramFactory.Rectangle
SVGDiagramFactory --> SVGDiagramFactory.Text
SVGDiagramFactory.Diagram *-- SVGDiagramFactory.Component

SVGDiagramFactory.Text --|> SVGDiagramFactory.Component
SVGDiagramFactory.Rectangle --|> SVGDiagramFactory.Component

PlainTextDiagramFactory --|> DiagramFactory
SVGDiagramFactory --|> DiagramFactory
@enduml